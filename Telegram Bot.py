import os
import time
import json
from datetime import datetime
import asyncio
from functools import wraps
import html

from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.request import HTTPXRequest
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

# -- –ù–ê–°–¢–†–û–ô–ö–ò --
TELEGRAM_BOT_TOKEN = "5989400727:AAFGCBxOkUfLc_qsjLJ97l45twvw0TOCvw4"
BOT_ADMIN_CHAT_ID = 652406317

# -- –ò–ú–ï–ù–ê –§–ê–ô–õ–û–í --
PIZZERIAS_FILE = 'ID –ø–∏—Ü—Ü–µ—Ä–∏–π.txt'
REVIEWS_DATA_FILE = 'reviews_data.json'
USERS_FILE = 'users.json'
SUBSCRIPTIONS_FILE = 'subscriptions.json'
LAST_SENT_REVIEWS_FILE = 'last_sent_reviews.json'
# –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å .xlsx —Ñ–∞–π–ª–æ–º
LABOUR_COST_REPORT_FILE = 'labour_cost_report.xlsx'
REQUEST_FILE = 'report_request.json'

# -- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ --
pizzerias_map = {}
GET_START_DATE, GET_END_DATE = range(2)


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---

def load_data(filename, default={}):
    if not os.path.exists(filename): return default
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return default


def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)


def load_pizzerias():
    global pizzerias_map
    pizzerias_map = {}
    try:
        with open(PIZZERIAS_FILE, 'r', encoding='utf-8') as f:
            for line in f:
                if ' - ' in line:
                    p_id, p_name = line.strip().split(' - ', 1)
                    pizzerias_map[p_id.lower()] = p_name
        print(f"[–ë–æ—Ç] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pizzerias_map)} –ø–∏—Ü—Ü–µ—Ä–∏–π –≤ –ø–∞–º—è—Ç—å.")
    except FileNotFoundError:
        print(f"[–ë–æ—Ç][–û—à–∏–±–∫–∞] –§–∞–π–ª '{PIZZERIAS_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'data_fetcher.py'.")


def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id != BOT_ADMIN_CHAT_ID:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await func(update, context, *args, **kwargs)

    return wrapped


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = str(user.id)
    users = load_data(USERS_FILE)
    if chat_id not in users:
        users[chat_id] = {"first_name": user.first_name, "username": user.username, "is_blocked": False}
        save_data(USERS_FILE, users)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è Dodo. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é.")


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    subscriptions = load_data(SUBSCRIPTIONS_FILE, {})
    user_subs = subscriptions.get(chat_id, [])

    if not pizzerias_map:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü–µ—Ä–∏–π –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        return

    buttons = []
    for pid, name in sorted(pizzerias_map.items(), key=lambda item: item[1]):
        text = f"{'‚úÖ ' if pid in user_subs else ''}{name}"
        buttons.append([InlineKeyboardButton(text, callback_data=f"sub_{pid}")])

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏:',
                                    reply_markup=InlineKeyboardMarkup(buttons))


async def my_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    subscriptions = load_data(SUBSCRIPTIONS_FILE, {})
    user_subs = subscriptions.get(chat_id, [])

    if not user_subs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe.")
        return

    message = "üìÑ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    sorted_subs = sorted([pid for pid in user_subs], key=lambda pid: pizzerias_map.get(pid, ''))
    for pid in sorted_subs:
        pizzeria_name = pizzerias_map.get(pid, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è ({pid})")
        message += f"‚Ä¢ {pizzeria_name}\n"

    await update.message.reply_text(message)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, pizzeria_id = query.data.split('_', 1)
    chat_id = str(query.message.chat_id)

    subscriptions = load_data(SUBSCRIPTIONS_FILE, {})
    user_subs = subscriptions.get(chat_id, [])
    pizzeria_name = pizzerias_map.get(pizzeria_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è")

    if action == 'sub':
        if pizzeria_id in user_subs:
            user_subs.remove(pizzeria_id)
            await context.bot.send_message(chat_id=chat_id, text=f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç '{pizzeria_name}'.")
        else:
            user_subs.append(pizzeria_id)
            await context.bot.send_message(chat_id=chat_id, text=f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ '{pizzeria_name}'.")
            await send_last_review(context, chat_id, pizzeria_id)

        subscriptions[chat_id] = user_subs
        save_data(SUBSCRIPTIONS_FILE, subscriptions)

        new_user_subs = subscriptions.get(chat_id, [])
        buttons = []
        for pid, name in sorted(pizzerias_map.items(), key=lambda item: item[1]):
            text = f"{'‚úÖ ' if pid in new_user_subs else ''}{name}"
            buttons.append([InlineKeyboardButton(text, callback_data=f"sub_{pid}")])

        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))


async def get_report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request_data = load_data(REQUEST_FILE)
    status = request_data.get('status')

    if status == 'completed' or status == 'notified':
        try:
            if os.path.exists(LABOUR_COST_REPORT_FILE) and os.path.getsize(LABOUR_COST_REPORT_FILE) > 0:
                mod_time_unix = os.path.getmtime(LABOUR_COST_REPORT_FILE)
                mod_time_str = datetime.fromtimestamp(mod_time_unix).strftime('%d.%m.%Y –≤ %H:%M')
                caption = f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ Labour Cost (—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω {mod_time_str})."
                await update.message.reply_document(document=open(LABOUR_COST_REPORT_FILE, 'rb'), caption=caption)
            else:
                await update.message.reply_text("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç (–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).")
        except FileNotFoundError:
            await update.message.reply_text("‚ùóÔ∏è –û—Ç—á–µ—Ç –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif status == 'processing':
        await update.message.reply_text(
            "‚è≥ –û—Ç—á–µ—Ç –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –Ø –ø—Ä–∏—à–ª—é –µ–≥–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")
    elif status == 'error':
        error_msg = request_data.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
        await update.message.reply_text(f"‚ùå –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{error_msg}`",
                                        parse_mode='Markdown')
    else:
        await update.message.reply_text(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç—á–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /labourcost.")


async def labour_cost_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    request_data = load_data(REQUEST_FILE)
    if request_data.get('status') in ['pending', 'processing']:
        await update.message.reply_text("‚è≥ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")
    return GET_START_DATE


async def get_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['start_date'] = datetime.strptime(update.message.text, "%d.%m.%Y")
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì).")
        return GET_END_DATE
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return GET_START_DATE


async def get_end_date_and_request_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        end_date = datetime.strptime(update.message.text, "%d.%m.%Y")
        start_date = context.user_data['start_date']

        request_data = {
            "status": "pending",
            "requested_by": update.effective_user.id,
            "start_date_iso": start_date.strftime('%Y-%m-%dT00:00:00'),
            "end_date_iso": end_date.strftime('%Y-%m-%dT23:59:59'),
        }
        save_data(REQUEST_FILE, request_data)

        await update.message.reply_text(
            "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, —è –ø—Ä–∏—à–ª—é –µ–≥–æ –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )

    except (ValueError, KeyError):
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /labourcost.")

    context.user_data.clear()
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


def format_review(review):
    pizzeria_name = pizzerias_map.get(review.get('unitId', '').lower(), f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è ({review.get('unitId')})")
    order_date_str = review.get('orderCreatedAt')
    if order_date_str:
        order_date = datetime.fromisoformat(order_date_str).strftime('%d.%m.%Y %H:%M')
    else:
        order_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    rate = review.get('orderRate', 0)
    rating_stars = "‚òÖ" * rate + "‚òÜ" * (5 - rate)
    comment_text = review.get('feedbackComment')

    message_lines = [f"üçï <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤: {pizzeria_name}</b>", "",
                     f"üìù <b>–ó–∞–∫–∞–∑:</b> ‚Ññ{review.get('orderNumber')} –æ—Ç {order_date}",
                     f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {rating_stars}", "", "üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>"]
    if comment_text:
        message_lines.append(html.escape(comment_text))
    else:
        message_lines.append("<i>(–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)</i>")
    return "\n".join(message_lines)


async def send_last_review(context: ContextTypes.DEFAULT_TYPE, chat_id: str, pizzeria_id: str):
    reviews = load_data(REVIEWS_DATA_FILE, [])
    last_review = next((r for r in reversed(reviews) if r.get('unitId', '').lower() == pizzeria_id.lower()), None)
    if last_review:
        message = "–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ –ø–æ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n" + format_review(last_review)
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ —ç—Ç–æ–π –ø–∏—Ü—Ü–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")


@admin_only
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    if not users:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for chat_id, user_data in users.items():
        status = "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_data.get('is_blocked') else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        message += f"<b>{user_data.get('first_name', '')}</b> (<code>{chat_id}</code>) - {status}\n"
    await update.message.reply_text(message, parse_mode='HTML')


@admin_only
async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id_to_block = context.args[0]
        users = load_data(USERS_FILE)
        if user_id_to_block in users:
            users[user_id_to_block]['is_blocked'] = True
            save_data(USERS_FILE, users)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_block} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")


@admin_only
async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id_to_unblock = context.args[0]
        users = load_data(USERS_FILE)
        if user_id_to_unblock in users:
            users[user_id_to_unblock]['is_blocked'] = False
            save_data(USERS_FILE, users)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_unblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")


# -- –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò –ë–û–¢–ê --
async def check_reviews_periodically(context: ContextTypes.DEFAULT_TYPE):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã...")
    try:
        current_reviews = load_data(REVIEWS_DATA_FILE, [])
        last_sent_reviews = load_data(LAST_SENT_REVIEWS_FILE, [])
        last_sent_ids = {f"{r.get('orderId')}_{r.get('orderRate')}" for r in last_sent_reviews}
        new_reviews = [r for r in current_reviews if f"{r.get('orderId')}_{r.get('orderRate')}" not in last_sent_ids]

        if not new_reviews:
            print("[–û—Ç–∑—ã–≤—ã] –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        print(f"[–û—Ç–∑—ã–≤—ã] –ù–∞–π–¥–µ–Ω–æ {len(new_reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤. –†–∞—Å—Å—ã–ª–∫–∞...")
        subscriptions = load_data(SUBSCRIPTIONS_FILE, {})
        users = load_data(USERS_FILE, {})

        for review in new_reviews:
            pizzeria_id = review.get('unitId', '').lower()
            message = format_review(review)
            for chat_id, user_subs in subscriptions.items():
                if not users.get(chat_id, {}).get('is_blocked') and pizzeria_id in user_subs:
                    try:
                        await context.bot.send_message(chat_id=int(chat_id), text=message, parse_mode='HTML')
                        await asyncio.sleep(0.1)
                    except Exception as e:
                        print(f"[–†–∞—Å—Å—ã–ª–∫–∞] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        save_data(LAST_SENT_REVIEWS_FILE, current_reviews)
        print("[–û—Ç–∑—ã–≤—ã] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(f"[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] –°–±–æ–π –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")


async def check_report_status_periodically(context: ContextTypes.DEFAULT_TYPE):
    request_data = load_data(REQUEST_FILE)
    status = request_data.get('status')

    if status in ['completed', 'error']:
        chat_id = request_data.get('requested_by')
        if not chat_id: return

        if status == 'completed':
            try:
                if os.path.exists(LABOUR_COST_REPORT_FILE) and os.path.getsize(LABOUR_COST_REPORT_FILE) > 0:
                    completed_at = datetime.fromisoformat(request_data['completed_at']).strftime('%d.%m.%Y –≤ %H:%M')
                    caption = f"‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ Labour Cost –≥–æ—Ç–æ–≤ (—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω {completed_at})."
                    await context.bot.send_document(chat_id=chat_id, document=open(LABOUR_COST_REPORT_FILE, 'rb'),
                                                    caption=caption)
                else:
                    await context.bot.send_message(chat_id=chat_id,
                                                   text="‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç (–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã).")
            except FileNotFoundError:
                await context.bot.send_message(chat_id=chat_id, text="‚ùóÔ∏è –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        elif status == 'error':
            error_msg = request_data.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
            await context.bot.send_message(chat_id=chat_id,
                                           text=f"‚ùå –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{error_msg}`",
                                           parse_mode='Markdown')

        request_data['status'] = 'notified'
        save_data(REQUEST_FILE, request_data)


async def post_init(application: Application):
    user_commands = [
        BotCommand("start", "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("subscribe", "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–∑—ã–≤—ã"),
        BotCommand("mysubscriptions", "üìÑ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã"),
        BotCommand("labourcost", "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ Labour Cost"),
        BotCommand("getreport", "üìÇ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç"),
    ]
    await application.bot.set_my_commands(user_commands)

    admin_commands = user_commands + [
        BotCommand("listusers", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("block", "‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (ID)"),
        BotCommand("unblock", "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (ID)"),
    ]
    await application.bot.set_my_commands(admin_commands, scope={'type': 'chat', 'chat_id': BOT_ADMIN_CHAT_ID})
    print("[–ë–æ—Ç] –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


# -- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ --
def main() -> None:
    load_pizzerias()

    request_settings = HTTPXRequest(connect_timeout=30.0, read_timeout=30.0, write_timeout=30.0)
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).request(request_settings).post_init(post_init).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("labourcost", labour_cost_command)],
        states={
            GET_START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_start_date)],
            GET_END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_end_date_and_request_report)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("mysubscriptions", my_subscriptions))
    application.add_handler(CommandHandler("getreport", get_report_command))
    application.add_handler(CommandHandler("listusers", list_users))
    application.add_handler(CommandHandler("block", block_user))
    application.add_handler(CommandHandler("unblock", unblock_user))
    application.add_handler(CallbackQueryHandler(button_callback))

    application.job_queue.run_repeating(check_reviews_periodically, interval=180, first=10)
    application.job_queue.run_repeating(check_report_status_periodically, interval=15, first=5)

    print("[–ë–æ—Ç] –ó–∞–ø—É—â–µ–Ω.")
    application.run_polling()


if __name__ == "__main__":
    main()

